wor=["ARRAY","LINKEDLIST","STACK","QUEUE","TREE","GRAPH","HASHMAP","HEAP","SORTING","SEARCHING","BREADTHFIRSTSEARCH","DEPTHFIRSTSEARCH","MERGESORT"
     "HASHING","GRAPHTHEORY","BACKTRACKING","PRIM","KRUSKAL","DIJKSTRA","QUICKSORT","RADIXSORT","TOPOLOGICALSORT","AVLTREE","BINARYTREE","BREADTHFIRSTTRAVERSAL","DEPTHFIRSTTRAVERSAL","DICTIONARY","FIBONACCISEQUENCE","HASHFUNCTION"
     ,"INORDERTRAVERSAL","POSTORDERTRAVERSAL","PREORDERTRAVERSAL","QUEUEOPERATIONS","STACKOPERATIONS"]
word_questions = {
 "ARRAY": "I am a data structure that stores a fixed-size sequential collection of elements of the same type. Who am I?",
 "LINKEDLIST": "I am a data structure consisting of a sequence of elements where each element points to the next one. Who am I?",
 "STACK": "I am a data structure that follows the Last In, First Out (LIFO) principle. Elements are added and removed from one end. What am I?",
 "QUEUE": "I am a data structure that follows the First In, First Out (FIFO) principle. Elements are added from one end and removed from the other. What am I?",
 "TREE": "I am a data structure that represents hierarchical relationships between elements. Each node has zero or more children nodes. What am I?",
 "GRAPH": "I am a data structure that consists of a finite set of vertices (nodes) connected by edges. What am I?",
 "HASHMAP": "I am a data structure that stores key-value pairs and provides efficient retrieval of values based on keys. What am I?",
 "HEAP": "I am a binary tree-based data structure that satisfies the heap property. What am I?",
 "SORTING": "I am a process of arranging elements in a specific order, such as ascending or descending. What am I?",
 "SEARCHING": "I am a process of finding a target value within a collection of data. What am I?",
 "BREADTHFIRSTSEARCH" : "I am a graph traversal algorithm that visits all the nodes of a graph level by level. What am I?",
 "DEPTHFIRSTSEARCH": "I am a graph traversal algorithm that explores as far as possible along each branch before backtracking. What am I?",
 "DIJKSTRA": "I am a shortest path algorithm that finds the shortest path between nodes in a graph with non-negative edge weights. What am I?",
 "KRUSKAL": "I am a minimum spanning tree algorithm that finds an edge of the least possible weight that connects any two trees in the forest. What am I?",
 "PRIM":"I am another minimum spanning tree algorithm that grows a tree from a starting vertex by adding the lowest-weight edge. What am I?",
 "BACKTRACKING": "I am a technique used to systematically search for solutions to problems by trying different sequences of decisions. What am I?",
 "GRAPHTHEORY": "I am a branch of mathematics concerned with the study of graphs, which represent pairwise relationships between objects. What am I?",
 "HASHING":"I am a technique that converts a range of key values into a range of indexes of an array. What am I?",
 "MERGESORT": "I am a comparison-based sorting algorithm that divides the input array into smaller subarrays, sorts them, and then merges them.What am I?",
 "QUICKSORT": "I am a comparison-based sorting algorithm that divides the input array into smaller subarrays based on a pivot element. What am I?",
 "RADIXSORT": "I am a non-comparison-based sorting algorithm that sorts elements by first grouping them by individual digits. What am I?",
 "TOPOLOGICALSORT": "I am an ordering of the nodes in a directed graph such that for every directed edge from node A to node B, A comes before B in the ordering. What am I?",
 "AVLTREE": "I am a self-balancing binary search tree where the heights of the two child subtrees of any node differ by at most one. What am I?",
 "BINARYTREE": "I am a hierarchical data structure in which each node has at most two children, typically referred to as the left child and the right child. What am I?",
 "BREADTHFIRSTTRAVERSAL": "I am a method of traversing or visiting all the nodes in a tree or graph level by level. What am I?",
 "DEPTHFIRSTTRAVERSAL": "I am a method of traversing or visiting all the nodes in a tree or graph by exploring as far as possible along each branch before backtracking. What am I?",
 "DICTIONARY": "I am a data structure that stores a collection of key-value pairs and provides efficient retrieval of values based on keys. What am I?",
 "FIBONACCISEQUENCE": "I am a sequence of numbers where each number is the sum of the two preceding ones. What am I?",
 "HASHFUNCTION": "I am a function that converts an input into a fixed-size string of characters, typically used to index data in a hash table. What am I?",
 "INORDERTRAVERSAL": "I am a method of traversing a binary tree where each node's left subtree is visited first, followed by the node itself, and then its right subtree. What am I?",
 "POSTORDERTRAVERSAL": "I am a method of traversing a binary tree where each node's left and right subtrees are visited before the node itself. What am I?",
 "PREORDERTRAVERSAL": "I am a method of traversing a binary tree where each node is visited before its left and right subtrees. What am I?",
 "QUEUEOPERATIONS": "I am a set of operations that can be performed on a queue data structure, typically including enqueue (adding) and dequeue (removing) operations. What am I?",
 "STACKOPERATIONS": "I am a set of operations that can be performed on a stack data structure, typically including push (adding) and pop (removing) operations. What am I?"
}